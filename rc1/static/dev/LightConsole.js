// Generated by CoffeeScript 1.6.2
(function() {
  var DEBUG, LightConsole;

  DEBUG = true;

  LightConsole = (function() {
    function LightConsole() {
      this.data = this.generateChannels();
      this.colorMap = this.getColorMap();
    }

    LightConsole.prototype.getColorMap = function() {
      var map;

      map = {
        'WHITE': 6,
        'RED': 20,
        'BLUE': 34,
        'GREEN': 48,
        'YELLOW': 62,
        'MAGENTA': 76,
        'ORANGE': 90,
        'UV': 104,
        'PINK': 118
      };
      return map;
    };

    LightConsole.prototype.generateChannels = function() {
      var temp;

      temp = [0];
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp[10] = 255;
      temp[11] = 255;
      temp[26] = 255;
      temp[27] = 255;
      temp[42] = 255;
      temp[43] = 255;
      temp[58] = 255;
      temp[59] = 255;
      return temp;
    };

    LightConsole.prototype.setDMX = function() {
      var d, e;

      d = JSON.stringify(this.data);
      if (jQuery) {
        try {
          return jQuery.ajax({
            type: 'POST',
            url: 'http://localhost:9090/set_dmx',
            data: {
              'u': 1,
              'd': d
            }
          }).fail(function() {
            return console.log('setDMX failed');
          });
        } catch (_error) {
          e = _error;
          return console.log('silence...');
        }
      }
    };

    LightConsole.prototype.setData = function(index, val) {
      return this.data[index] = val;
    };

    LightConsole.prototype.setColor = function(color, index) {
      var val;

      if ((index != null)) {
        val = this.colorMap[color];
        if (val != null) {
          return this.setData(index * 16 + 4, val);
        }
      } else {
        this.setColor(color, 0);
        this.setColor(color, 1);
        this.setColor(color, 2);
        return this.setColor(color, 3);
      }
    };

    LightConsole.prototype.setPan = function(val, index) {
      if ((index != null)) {
        return this.setData(index * 16 + 0, val);
      } else {
        DEBUG && console.log('setpan called' + val);
        this.setPan(val, 0);
        this.setPan(val, 1);
        this.setPan(val, 2);
        return this.setPan(val, 3);
      }
    };

    LightConsole.prototype.setTilt = function(val, index) {
      if ((index != null)) {
        return this.setData(index * 16 + 2, val);
      } else {
        DEBUG && console.log('settilt called' + val);
        this.setTilt(val, 0);
        this.setTilt(val, 1);
        this.setTilt(val, 2);
        return this.setTilt(val, 3);
      }
    };

    LightConsole.prototype.setGobo = function(goboIndex, index) {
      var val;

      DEBUG && console.log('setgobo called');
      if ((index != null)) {
        val = goboIndex * 14 + 6;
        return this.setData(index, val);
      } else {
        this.setGobo(goboIndex, 0);
        this.setGobo(goboIndex, 1);
        this.setGobo(goboIndex, 2);
        return this.setGobo(goboIndex, 3);
      }
    };

    LightConsole.prototype.getAngles = function(x, y, z) {
      var hor, ver;

      if (z > 10) {
        ver = 127;
      } else {
        ver = 127 - Math.acos(z / 10.0) / Math.PI * 127;
      }
      hor = Math.atan(y * 1.0 / x) / Math.PI * 72;
      if (x < 0) {
        hor = hor + 72;
      }
      if (hor < 0) {
        hor = hor + 144;
      }
      console.log('val: ' + hor);
      return [ver, hor];
    };

    LightConsole.prototype.updateData = function() {
      return true;
    };

    return LightConsole;

  })();

  window.LightConsole = LightConsole;

}).call(this);
