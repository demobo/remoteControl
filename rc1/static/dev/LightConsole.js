// Generated by CoffeeScript 1.6.2
(function() {
  var DEBUG, LightConsole;

  DEBUG = false;

  LightConsole = (function() {
    function LightConsole() {
      this.data = this.generateChannels();
      this.colorMap = this.getColorMap();
    }

    LightConsole.prototype.getColorMap = function() {
      var map;

      map = {
        'WHITE': 6,
        'RED': 20,
        'BLUE': 34,
        'GREEN': 48,
        'YELLOW': 62,
        'MAGENTA': 76,
        'ORANGE': 90,
        'UV': 104,
        'PINK': 118
      };
      return map;
    };

    LightConsole.prototype.generateChannels = function() {
      var temp;

      temp = [0];
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp = temp.concat(temp);
      temp[10] = 255;
      temp[11] = 255;
      temp[26] = 255;
      temp[27] = 255;
      temp[42] = 255;
      temp[43] = 255;
      temp[58] = 255;
      temp[59] = 255;
      return temp;
    };

    LightConsole.prototype.setDMX = function() {
      var d, e;

      d = JSON.stringify(this.data);
      if (jQuery) {
        try {
          return jQuery.ajax({
            type: 'POST',
            url: 'http://localhost:9090/set_dmx',
            data: {
              'u': 1,
              'd': d
            }
          }).fail(function() {
            return console.log('setDMX failed');
          });
        } catch (_error) {
          e = _error;
          return console.log('silence...');
        }
      }
    };

    LightConsole.prototype.setData = function(index, val) {
      return this.data[index] = val;
    };

    /*
      set color of lights
    */


    LightConsole.prototype.setColor = function(color, index) {
      var val;

      if ((index != null)) {
        val = this.colorMap[color];
        if (val != null) {
          return this.setData(index * 16 + 4, val);
        }
      } else {
        this.setColor(color, 0);
        this.setColor(color, 1);
        this.setColor(color, 2);
        return this.setColor(color, 3);
      }
    };

    /*
    set horizontal angle of lights
    */


    LightConsole.prototype.setPan = function(val, index) {
      if ((index != null)) {
        return this.setData(index * 16 + 0, val);
      } else {
        DEBUG && console.log('setpan called' + val);
        this.setPan(val, 0);
        this.setPan(val, 1);
        this.setPan(val, 2);
        return this.setPan(val, 3);
      }
    };

    /*
      set vertical angle of lights
    */


    LightConsole.prototype.setTilt = function(val, index) {
      if ((index != null)) {
        return this.setData(index * 16 + 2, val);
      } else {
        DEBUG && console.log('settilt called' + val);
        this.setTilt(val, 0);
        this.setTilt(val, 1);
        this.setTilt(val, 2);
        return this.setTilt(val, 3);
      }
    };

    /*
    predefied patterns
    */


    LightConsole.prototype.setPattern = function(patternIndex, index) {
      var mapping;

      mapping = {
        0: 0,
        1: 1,
        2: 3,
        3: 7,
        4: 9,
        5: 14
      };
      return this.setGobo(mapping[patternIndex], index);
    };

    /*
    there are totally 15 gobos. index 0 is default circle; index 1-7 are rotation gobos; 8-14 are fixed gobos
    */


    LightConsole.prototype.setGobo = function(goboIndex, index) {
      var channel, channel1, channel2, val;

      DEBUG && console.log('setgobo called');
      if ((index != null)) {
        if (goboIndex === 0) {
          channel1 = index * 16 + 5;
          channel2 = index * 16 + 7;
          this.setData(channel1, 0);
          return this.setData(channel2, 0);
        } else if (goboIndex < 8) {
          channel = index * 16 + 5;
          val = goboIndex * 10 + 5;
          this.setData(channel, val);
          return this.setData(index * 16 + 7, 0);
        } else {
          channel = index * 16 + 7;
          val = goboIndex * 14 + 20;
          this.setData(index * 16 + 5, 0);
          return this.setData(channel, val);
        }
      } else {
        this.setGobo(goboIndex, 0);
        this.setGobo(goboIndex, 1);
        this.setGobo(goboIndex, 2);
        return this.setGobo(goboIndex, 3);
      }
    };

    /*
      val can be 0-1, which 0 correspons to smallest diameter and 1 largest.
    */


    LightConsole.prototype.setLightDiameter = function(val, index) {
      if ((index != null)) {
        val = Math.floor(val * 191);
        return this.setData(index * 16 + 12, val);
      } else {
        this.setLightDiameter(val, 0);
        this.setLightDiameter(val, 1);
        this.setLightDiameter(val, 2);
        return this.setLightDiameter(val, 3);
      }
    };

    /*
      val can be 0-1, which 0 corresponds to smallest intesity and 1 largets
    */


    LightConsole.prototype.setLightIntensity = function(val, index) {
      if ((index != null)) {
        val = Math.floor(val * 255);
        return this.setData(index * 16 + 11, val);
      } else {
        this.setLightIntensity(val, 0);
        this.setLightIntensity(val, 1);
        this.setLightIntensity(val, 2);
        return this.setLightIntensity(val, 3);
      }
    };

    /*
      val can be 0-1, which 0 corresponds to smallest intesity and 1 largets
    */


    LightConsole.prototype.setFrostFilter = function(val, index) {
      if ((index != null)) {
        val = Math.floor(val * 191);
        return this.setData(index * 16 + 13, val);
      } else {
        this.setFrostFilter(val, 0);
        this.setFrostFilter(val, 1);
        this.setFrostFilter(val, 2);
        return this.setFrostFilter(val, 3);
      }
    };

    /*
      There are 8 options for shutter control (I dont exactly know what every option does...default to 8th option)
    */


    LightConsole.prototype.setShutter = function(optionIndex, index) {
      var val;

      if ((optionIndex != null)) {
        val = optionIndex * 32 + 16;
        return this.setData(index * 16 + 10, val);
      } else {
        this.setShutter(optionIndex, 0);
        this.setShutter(optionIndex, 1);
        this.setShutter(optionIndex, 2);
        return this.setShutter(optionIndex, 3);
      }
    };

    LightConsole.prototype.getAngles = function(x, y, z) {
      var hor, ver;

      if (z > 10) {
        ver = 127;
      } else {
        ver = 127 - Math.acos(z / 10.0) / Math.PI * 127;
      }
      hor = Math.atan(y * 1.0 / x) / Math.PI * 72;
      if (x < 0) {
        hor = hor + 72;
      }
      if (hor < 0) {
        hor = hor + 144;
      }
      DEBUG && console.log('val: ' + hor);
      return [ver, hor];
    };

    LightConsole.prototype.updateData = function() {
      return true;
    };

    return LightConsole;

  })();

  window.LightConsole = LightConsole;

}).call(this);
